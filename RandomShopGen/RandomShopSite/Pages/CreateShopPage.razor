@page "/createshop"
@using RandomShopGen.Lib
@using RandomShopGen.Lib.Models
@using System.Text
@using System.Text.Json

<h1>Create Shop</h1>

<h2>New Shop Entry Form</h2>

<div class="form-group">
    <EditForm Model="@newShop" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label for="ShopName">Shop Name: </label>
            <InputText id="ShopName" @bind-Value="newShop.ShopName" />
        </p>
        <p>
            <label for="OwnerName">Owner Name: </label>
            <InputText id="OwnerName" @bind-Value="newShop.OwnerName" />
        </p>
        <p>
            <label for="StartingGold">Starting Gold: </label>
            <InputNumber id="StartingGold" @bind-Value="newShop.StartingGold" />
        </p>
        <p>
            <label for="Description">Description: </label>
            <InputTextArea id="Description" @bind-Value="newShop.Description" />
        </p>

        <p>
            <InputFile OnChange="HandleFileSelected" />
        </p>

        @if (file != null)
        {
            <p>Name: @file.Name</p>
            <p>Size in bytes: @file.Size</p>
            <p>Last modified date: @file.LastModified.ToString()</p>
            <p>Content type (not always supplied by the browser): @file.ContentType</p>
            <button @onclick="ReadFile">ReadFile</button>
            @if (shop != null)
            {
                <p>Shop Name: @shop.Name</p>
            }
        }
        @*<button type="button" @onclick="HandleAddItem">Add Item</button>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"><b>Item Name*</b></th>
                    <th scope="col"><b>Item Value*</b></th>
                    <th scope="col"><b>Item Type*</b></th>
                    <th scope="col">Item Tier</th>
                    <th scope="col">Item Description</th>
                    <th scope="col">Reference Location</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in newShop.Items)
                {
                    <tr>
                        <td><InputText id="ItemName" @bind-Value="item.Name"/></td>
                        <td><InputNumber id="ItemValuue" @bind-Value="item.Value"/></td>
                        <td><InputSelect id="ItemType" @bind-Value="item.ItemType">
                            <option value="@ItemType.Consumable">Consumable</option>
                            <option value="@ItemType.Wearable">Wearable</option>
                            <option value="@ItemType.Consumable">Consumable</option>
                            <option value="@ItemType.Key">Key</option>
                            <option value="@ItemType.Chargeable">Chargeable</option>
                        </InputSelect></td>
                        <td><InputNumber id="ItemTier" @bind-Value="item.ItemTier"/></td>
                        <td><InputTextArea id="ItemDescription" @bind-Value="item.Description"/></td>
                        <td><InputText id="ReferenceLocation" @bind-Value="item.ReferenceLocation"/></td>
                    </tr>
                }
            </tbody>
        </table>*@



        <p>
            <button type="submit">Submit</button>
        </p>
    </EditForm>

    <p>
        <textarea @bind="@resultString" class="w-50"></textarea>
    </p>
</div>

@code {
    private readonly ShopRequest newShop = new ShopRequest(new JsonExtractor());

    private string resultString = string.Empty;
    private IBrowserFile file;
    private Shop shop;

    private void HandleValidSubmit()
    {
        if (shop != null)
        {
            resultString = JsonSerializer.Serialize<Shop>(shop);
        }
        this.StateHasChanged();
    }

    private void HandleAddItem()
    {
        //newShop.Items.Add(new Item());
        this.StateHasChanged();
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task ReadFile()
    {
        var format = "application/json";
        string fileData = string.Empty;

        if (file.ContentType == format)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            fileData = $"{Encoding.UTF8.GetString(buffer, 0, buffer.Length)}";
        }

        if (!string.IsNullOrEmpty(fileData))
        {
            newShop.ItemString = fileData;
            shop = newShop.BuildShopFromRequest();
        }
    }
}
